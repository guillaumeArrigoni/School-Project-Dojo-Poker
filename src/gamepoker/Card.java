package gamepoker;

import java.util.Objects;

/**
 * The poker game contains 52 cards without joker, a card is composed by a value and a color
 *
 * @author Karim CHARLEUX & Yacine MERIOUA
 */
public class Card implements Comparable<Card> {
    /**
     * The value of the card with a position between 2 and 14 to determine the highest to the lowest card
     */
    private Value value;
    private Color color;

    /**
     * Create Card with a specified value
     *
     * @param value The value's card
     */
    public Card(String card) {
        if( card.length() == 4) {
            this.value = new Value(card.substring(0,2));
            this.color = new Color(card.substring(2,4));
        }
        else {
            this.value = new Value(card.substring(0,1));
            this.color = new Color(card.substring(1,3));
        }
    }

    /**
     * @return The value object of the current card
     */
    public Value getValue() {
        return this.value;
    }

    public Color getColor() { return this.color;}

    /**
     * Overriding equals() to compare two Card objects
     *
     * @param object The Card object to compare to the current Card
     * @return True if object is equals to current Card value or False if not
     */
    @Override
    public boolean equals(Object object) {
        // If the object is compared with itself then return true
        if (object == this) {
            return true;
        }
        // Check if object is an instance of Card or not
        if (!(object instanceof Card)) {
            return false;
        }
        // Typecast object to Card so that we can compare data
        Card card2 = (Card) object;

        // Compare the card value data and return accordingly
        return card2.value.equals(this.value) && card2.color.equals(this.color);
    }

    /**
     * @return a unique integer value, generated by a hashing algorithm according to value
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.value);
    }

    /**
     * Convert a card object in a string object to correct display
     *
     * @return the card converted to a string
     */
    @Override
    public String toString() {
        return this.value.toString();
    }

    /**
     * Compare two Card object based on value
     *
     * @param card the object to be compared.
     * @return -1 = Current < Second | 0 = Equal | 1 = Current > Second
     */
    @Override
    public int compareTo(Card card) {
        return this.value.compareTo(card.getValue());
    }
}
